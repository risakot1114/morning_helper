<!DOCTYPE html>
<html lang="ja">
  <head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>今日のコーデ予報 - ポップ&CUTEプロトタイプ</title>
  
  <!-- Tailwind CSS を読み込み -->
  <script src="https://cdn.tailwindcss.com"></script>
  
  <!-- Google Fonts（M PLUS Rounded 1c）を読み込み -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=M+PLUS+Rounded+1c:wght@400;500;700;800&display=swap" rel="stylesheet">

  <style>
    /* ポップでCUTEなテーマのカスタムスタイル */
    body {
      font-family: 'M PLUS Rounded 1c', sans-serif;
      background: linear-gradient(135deg, #87CEEB 0%, #B0E0E6 50%, #E0F6FF 100%);
      background-attachment: fixed;
      color: #2c3e50;
      position: relative;
      overflow-x: hidden;
    }
    
    /* はっきりとした雲の形 */
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: 
        /* 大きな雲1 - 自然な雲の形 */
        radial-gradient(ellipse 100px 70px at 20% 17%, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.9) 30%, transparent 70%),
        radial-gradient(ellipse 80px 50px at 16% 20%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 40%, transparent 80%),
        radial-gradient(ellipse 60px 40px at 23% 20%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 90%),
        
        /* 大きな雲2 - 自然な雲の形 */
        radial-gradient(ellipse 90px 65px at 75% 22%, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.9) 30%, transparent 70%),
        radial-gradient(ellipse 70px 45px at 72% 25%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 40%, transparent 80%),
        radial-gradient(ellipse 50px 35px at 78% 25%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 90%),
        
        /* 大きな雲3 - 自然な雲の形 */
        radial-gradient(ellipse 85px 60px at 50% 9%, rgba(255, 255, 255, 0.97) 0%, rgba(255, 255, 255, 0.88) 30%, transparent 70%),
        radial-gradient(ellipse 65px 45px at 47% 12%, rgba(255, 255, 255, 0.94) 0%, rgba(255, 255, 255, 0.78) 40%, transparent 80%),
        radial-gradient(ellipse 50px 35px at 53% 12%, rgba(255, 255, 255, 0.89) 0%, rgba(255, 255, 255, 0.68) 50%, transparent 90%),
        
        /* 大きな雲4 - 自然な雲の形 */
        radial-gradient(ellipse 95px 68px at 30% 35%, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.9) 30%, transparent 70%),
        radial-gradient(ellipse 75px 48px at 27% 37%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 40%, transparent 80%),
        radial-gradient(ellipse 55px 38px at 33% 37%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 90%),
        
        /* 大きな雲5 - 自然な雲の形 */
        radial-gradient(ellipse 88px 62px at 85% 43%, rgba(255, 255, 255, 0.97) 0%, rgba(255, 255, 255, 0.88) 30%, transparent 70%),
        radial-gradient(ellipse 68px 42px at 89% 46%, rgba(255, 255, 255, 0.94) 0%, rgba(255, 255, 255, 0.78) 40%, transparent 80%),
        radial-gradient(ellipse 48px 32px at 82% 46%, rgba(255, 255, 255, 0.89) 0%, rgba(255, 255, 255, 0.68) 50%, transparent 90%),
        radial-gradient(ellipse 80px 55px at 25% 60%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.85) 35%, transparent 75%),
        radial-gradient(ellipse 60px 40px at 13% 55%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.75) 45%, transparent 85%),
        
        /* 大きな雲6 - 下部左 */
        radial-gradient(ellipse 100px 70px at 15% 75%, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.9) 30%, transparent 70%),
        radial-gradient(ellipse 80px 50px at 12% 78%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 40%, transparent 80%),
        radial-gradient(ellipse 60px 40px at 18% 78%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 90%),
        
        /* 大きな雲7 - 下部中央左 */
        radial-gradient(ellipse 100px 70px at 35% 80%, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.9) 30%, transparent 70%),
        radial-gradient(ellipse 80px 50px at 32% 83%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 40%, transparent 80%),
        radial-gradient(ellipse 60px 40px at 38% 83%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 90%),
        
        /* 大きな雲8 - 下部中央右 */
        radial-gradient(ellipse 100px 70px at 55% 85%, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.9) 30%, transparent 70%),
        radial-gradient(ellipse 80px 50px at 52% 88%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 40%, transparent 80%),
        radial-gradient(ellipse 60px 40px at 58% 82%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 90%),
        
        /* 大きな雲9 - 下部右 */
        radial-gradient(ellipse 100px 70px at 75% 78%, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.9) 30%, transparent 70%),
        radial-gradient(ellipse 80px 50px at 72% 81%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 40%, transparent 80%),
        radial-gradient(ellipse 60px 40px at 78% 81%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 90%),
        
        /* 大きな雲10 - 下部右端 */
        radial-gradient(ellipse 100px 70px at 95% 82%, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.9) 30%, transparent 70%),
        radial-gradient(ellipse 80px 50px at 92% 85%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 40%, transparent 80%),
        radial-gradient(ellipse 60px 40px at 98% 85%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 90%),
        radial-gradient(ellipse 75px 50px at 73% 57%, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.85) 35%, transparent 75%),
        radial-gradient(ellipse 55px 35px at 70% 60%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.75) 45%, transparent 85%),
        
        /* 小さな雲たち - 自然な形 */
        radial-gradient(ellipse 50px 35px at 10% 80%, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.75) 40%, transparent 80%),
        radial-gradient(ellipse 40px 30px at 60% 15%, rgba(255, 255, 255, 0.85) 0%, rgba(255, 255, 255, 0.7) 45%, transparent 85%),
        radial-gradient(ellipse 35px 25px at 10% 57%, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.65) 50%, transparent 90%);
      animation: clearCloudFloat 40s ease-in-out infinite;
      z-index: -1;
    }
    
    @keyframes clearCloudFloat {
      0%, 100% { transform: translateX(0px) translateY(0px) scale(1); }
      25% { transform: translateX(10px) translateY(-5px) scale(1.01); }
      50% { transform: translateX(-8px) translateY(8px) scale(0.99); }
      75% { transform: translateX(12px) translateY(-6px) scale(1.005); }
    }
    .card {
      background: linear-gradient(145deg, rgba(255, 255, 255, 0.98), rgba(255, 255, 255, 0.9));
      border-radius: 2.5rem; /* トイ・ストーリー風の丸角 */
      padding: 1.8rem;
      margin-bottom: 1.5rem;
      box-shadow: 
        0 12px 30px -8px rgba(135, 206, 235, 0.4),
        0 6px 20px -4px rgba(176, 224, 230, 0.3),
        inset 0 2px 0 rgba(255, 255, 255, 0.9),
        0 0 0 1px rgba(255, 255, 255, 0.6);
      border: 3px solid rgba(255, 255, 255, 0.9);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      backdrop-filter: blur(15px);
      position: relative;
    }
    .card:hover {
      transform: translateY(-8px) scale(1.02);
      box-shadow: 
        0 20px 40px -10px rgba(135, 206, 235, 0.5),
        0 10px 30px -6px rgba(176, 224, 230, 0.4),
        inset 0 3px 0 rgba(255, 255, 255, 0.95);
    }
    .app-title {
      color: #2E86AB; /* トイ・ストーリー風のブルー */
      font-weight: 800;
      font-size: 1.6rem;
      text-shadow: 
        0 3px 6px rgba(255, 255, 255, 0.9),
        0 1px 3px rgba(46, 134, 171, 0.3);
      letter-spacing: 0.5px;
    }
    .icon-bg {
      width: 5rem;
      height: 5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background: linear-gradient(145deg, rgba(255, 255, 255, 0.9), rgba(135, 206, 235, 0.2));
      font-size: 2.8rem;
      box-shadow: 
        0 8px 20px -4px rgba(135, 206, 235, 0.3),
        inset 0 2px 0 rgba(255, 255, 255, 0.8);
      border: 3px solid rgba(255, 255, 255, 0.8);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    .plus-icon {
      color: #87CEEB; /* プラス記号をスカイブルーに */
      font-size: 2.5rem;
      font-weight: 300;
      text-shadow: 0 2px 4px rgba(255, 255, 255, 0.8);
    }
    .advice-box {
      background: linear-gradient(135deg, rgba(135, 206, 235, 0.2), rgba(176, 224, 230, 0.1));
      color: #4682B4;
      border-radius: 1rem;
      padding: 1rem;
      font-weight: 500;
      border: 1px solid rgba(255, 255, 255, 0.6);
      box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.8);
    }
    .footer-nav a.active {
      color: #4682B4;
    }
    
    /* スタイル選択ボタンのスタイル */
    .style-btn {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 0.5rem 0.75rem;
      border-radius: 1rem;
      background: linear-gradient(145deg, rgba(255, 255, 255, 0.8), rgba(135, 206, 235, 0.1));
      border: 2px solid rgba(255, 255, 255, 0.6);
      color: #666;
      font-weight: 500;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
      min-width: 4rem;
      box-shadow: 0 4px 12px -4px rgba(135, 206, 235, 0.2);
    }
    
    .style-btn:hover {
      transform: translateY(-2px) scale(1.05);
      background: linear-gradient(145deg, rgba(255, 255, 255, 0.9), rgba(135, 206, 235, 0.2));
      box-shadow: 0 6px 16px -4px rgba(135, 206, 235, 0.3);
    }
    
    .style-btn.active {
      background: linear-gradient(145deg, rgba(70, 130, 180, 0.2), rgba(135, 206, 235, 0.3));
      color: #4682B4;
      border-color: rgba(70, 130, 180, 0.4);
      box-shadow: 
        0 6px 16px -4px rgba(70, 130, 180, 0.3),
        inset 0 2px 0 rgba(255, 255, 255, 0.8);
    }
    
    .style-btn.active:hover {
      transform: translateY(-2px) scale(1.05);
      background: linear-gradient(145deg, rgba(70, 130, 180, 0.3), rgba(135, 206, 235, 0.4));
    }
  </style>
  </head>
<body class="antialiased">

  <div class="container mx-auto max-w-sm p-4 pb-32">

    <!-- ===== ヘッダー ===== -->
    <header class="flex justify-between items-center py-4 px-2">
      <h1 class="app-title">Otenki Coord</h1>
      <div class="w-8 h-8 flex items-center justify-center rounded-full bg-white shadow-md">
        <span class="text-xl" role="img" aria-label="settings">⚙️</span>
      </div>
    </header>

    <main>
      <!-- ===== 今日の天気エリア ===== -->
      <section class="card text-center transform -rotate-1">
        <h2 class="font-bold text-lg text-gray-600" id="location">東京都, 渋谷区</h2>
        <p class="text-sm text-gray-400 mb-4" id="date">9月23日 (火)</p>
        
        <div class="flex justify-center items-center gap-4">
          <!-- 天気アイコン（絵文字） -->
          <span class="text-7xl" role="img" aria-label="partly-sunny" id="weather-icon">🌤️</span>
          <div>
            <!-- 現在の気温 -->
            <p class="text-6xl font-bold text-gray-800" id="temperature">23<span class="text-2xl align-top text-gray-500">℃</span></p>
          </div>
        </div>

        <div class="mt-4 flex justify-around text-center">
          <div>
            <p class="text-sm text-gray-500">最高/最低</p>
            <p class="font-bold text-gray-700" id="temp-range">25℃ / 18℃</p>
          </div>
          <div>
            <p class="text-sm text-gray-500">降水確率</p>
            <p class="font-bold text-gray-700" id="rain-probability">20%</p>
          </div>
        </div>
      </section>

      <!-- ===== 今日の服装提案エリア ===== -->
      <section class="card transform rotate-1">
        <h3 class="font-bold text-lg mb-4 text-center">きょうのコーデ案</h3>
        
        <!-- スタイル選択ボタン -->
        <div class="flex justify-center gap-2 mb-4">
          <button class="style-btn active" data-style="business" id="style-business">
            <span class="text-lg">👔</span>
            <span class="text-xs">ビジネス</span>
          </button>
          <button class="style-btn" data-style="casual" id="style-casual">
            <span class="text-lg">👕</span>
            <span class="text-xs">カジュアル</span>
          </button>
          <button class="style-btn" data-style="child" id="style-child">
            <span class="text-lg">👶</span>
            <span class="text-xs">キッズ</span>
          </button>
        </div>
        
        <div class="flex justify-around items-center text-center">
          <!-- 服装アイコン (絵文字) -->
          <div class="flex flex-col items-center">
            <div class="icon-bg"><span role="img" aria-label="cardigan" id="clothing-icon-1">🧥</span></div>
            <p class="text-sm mt-2 font-semibold" id="clothing-name-1">カーデ</p>
          </div>
          <span class="plus-icon">+</span>
          <div class="flex flex-col items-center">
            <div class="icon-bg"><span role="img" aria-label="t-shirt" id="clothing-icon-2">👕</span></div>
            <p class="text-sm mt-2 font-semibold" id="clothing-name-2">半袖</p>
          </div>
          <span class="plus-icon">+</span>
          <div class="flex flex-col items-center">
             <div class="icon-bg"><span role="img" aria-label="jeans" id="clothing-icon-3">👖</span></div>
            <p class="text-sm mt-2 font-semibold" id="clothing-name-3">長ズボン</p>
          </div>
        </div>
        <p class="mt-6 text-sm advice-box" id="clothing-advice">
          日中はぽかぽか陽気だけど、夜は肌寒いかも。羽織るものがあると安心だよ！
        </p>
      </section>

      <!-- ===== 持ち物アドバイスエリア ===== -->
      <section class="card transform -rotate-1">
        <h3 class="font-bold text-lg mb-4">おすすめの持ち物</h3>
        <div class="space-y-4" id="items-advice">
          <div class="flex items-center gap-4">
            <span class="text-3xl" role="img" aria-label="umbrella">🌂</span>
            <p class="text-sm">夕方から雨が降るかも？折りたたみ傘があると安心！</p>
          </div>
          <div class="flex items-center gap-4">
            <span class="text-3xl" role="img" aria-label="sunglasses">🕶️</span>
            <p class="text-sm">日差しが強いから、UV対策は忘れずにね。</p>
          </div>
        </div>
      </section>
    </main>
  </div>
  
  <!-- ===== フッターナビゲーション ===== -->
  <footer class="fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-sm max-w-sm mx-auto rounded-t-3xl shadow-lg border-t border-blue-100">
    <nav class="flex justify-around py-3">
      <a href="#" class="flex flex-col items-center justify-center text-center w-full py-2 active">
        <span class="text-2xl" role="img" aria-label="home">🏠</span>
        <span class="text-xs font-bold">ホーム</span>
      </a>
      <a href="#" class="flex flex-col items-center justify-center text-gray-400 text-center w-full py-2">
        <span class="text-2xl" role="img" aria-label="calendar">🗓️</span>
        <span class="text-xs">週間</span>
      </a>
      <a href="#" class="flex flex-col items-center justify-center text-gray-400 text-center w-full py-2">
        <span class="text-2xl" role="img" aria-label="people">👨‍👩‍👧‍👦</span>
        <span class="text-xs">みんな</span>
      </a>
      <a href="#" class="flex flex-col items-center justify-center text-gray-400 text-center w-full py-2">
        <span class="text-2xl" role="img" aria-label="person">🥰</span>
        <span class="text-xs">マイページ</span>
      </a>
    </nav>
  </footer>

  <script>
    // グローバル変数
    let currentWeatherData = null;
    let currentStyle = 'business';
    let userLocation = null;
    
    // 現在地を取得する関数
    function getCurrentLocation() {
      return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
          reject(new Error('Geolocation is not supported by this browser.'));
          return;
        }
        
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const location = {
              lat: position.coords.latitude,
              lon: position.coords.longitude,
              accuracy: position.coords.accuracy
            };
            userLocation = location;
            resolve(location);
          },
          (error) => {
            console.warn('GPS取得に失敗しました:', error.message);
            // GPSが利用できない場合は東京の座標を使用
            const fallbackLocation = {
              lat: 35.6762,
              lon: 139.6503,
              accuracy: null
            };
            userLocation = fallbackLocation;
            resolve(fallbackLocation);
          },
          {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 300000 // 5分間キャッシュ
          }
        );
      });
    }
    
    // データを取得して表示する関数
    async function fetchAndDisplayData() {
      try {
        // 現在の日付を表示
        const today = new Date();
        const options = { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric',
          weekday: 'short'
        };
        const dateString = today.toLocaleDateString('ja-JP', options);
        document.getElementById('date').textContent = dateString;
        
        // 現在地を取得
        const location = await getCurrentLocation();
        console.log('現在地:', location);
        
        // 天気データを取得
        const weatherResponse = await fetch(`/api/v1/weather?lat=${location.lat}&lon=${location.lon}`);
        const weatherData = await weatherResponse.json();
        
        if (weatherData.status === 'success') {
          currentWeatherData = weatherData.data;
          
          // 天気データを表示
          document.getElementById('weather-icon').textContent = weatherData.data.current.icon;
          document.getElementById('temperature').innerHTML = weatherData.data.current.temperature + '<span class="text-2xl align-top text-gray-500">℃</span>';
          document.getElementById('temp-range').textContent = `${weatherData.data.today.max_temp}℃ / ${weatherData.data.today.min_temp}℃`;
          document.getElementById('rain-probability').textContent = weatherData.data.today.rain_probability + '%';
          
          // 場所の情報を表示
          if (weatherData.data.location) {
            document.getElementById('location').textContent = weatherData.data.location.name;
          }
          
          // 服装データを取得（現在選択されているスタイルで）
          await fetchClothingData(currentStyle);
          
          // 持ち物アドバイスを取得
          const itemsResponse = await fetch(`/api/v1/items?temperature=${weatherData.data.current.temperature}&weather=${weatherData.data.current.condition}&humidity=${weatherData.data.current.humidity}&wind_speed=${weatherData.data.current.wind_speed}`);
          const itemsData = await itemsResponse.json();
          
          if (itemsData.status === 'success') {
            // 持ち物アドバイスを表示
            displayItemsAdvice(itemsData.data);
          }
        }
      } catch (error) {
        console.error('データの取得に失敗しました:', error);
        // エラー時はデフォルトの持ち物アドバイスを表示
        displayDefaultItemsAdvice();
      }
    }
    
    // 服装データを取得する関数
    async function fetchClothingData(style) {
      if (!currentWeatherData) return;
      
      try {
        const temp = currentWeatherData.current.temperature;
        const clothingResponse = await fetch(`/api/v1/clothing?temperature=${temp}&weather=${currentWeatherData.current.condition}&style=${style}`);
        const clothingData = await clothingResponse.json();
        
        if (clothingData.status === 'success') {
          // 服装データを表示
          displayClothingData(clothingData.data);
        }
      } catch (error) {
        console.error('服装データの取得に失敗しました:', error);
      }
    }
    
    // 服装データを表示する関数
    function displayClothingData(clothingData) {
      const outfit = clothingData.outfit;
      
      // アウターがある場合とない場合で表示を分ける
      if (outfit.outer) {
        // アウターがある場合: アウター + トップス + ボトムス
        document.getElementById('clothing-icon-1').textContent = getOuterIcon(outfit.outer);
        document.getElementById('clothing-name-1').textContent = outfit.outer;
        document.getElementById('clothing-icon-2').textContent = getTopIcon(outfit.top);
        document.getElementById('clothing-name-2').textContent = outfit.top;
        document.getElementById('clothing-icon-3').textContent = getBottomIcon(outfit.bottom);
        document.getElementById('clothing-name-3').textContent = outfit.bottom;
      } else {
        // アウターがない場合: トップス + ボトムス + 靴/アクセサリー
        document.getElementById('clothing-icon-1').textContent = getTopIcon(outfit.top);
        document.getElementById('clothing-name-1').textContent = outfit.top;
        document.getElementById('clothing-icon-2').textContent = getBottomIcon(outfit.bottom);
        document.getElementById('clothing-name-2').textContent = outfit.bottom;
        
        // 3番目は靴やアクセサリーを表示
        if (outfit.shoes) {
          document.getElementById('clothing-icon-3').textContent = getShoesIcon(outfit.shoes);
          document.getElementById('clothing-name-3').textContent = outfit.shoes;
        } else if (outfit.accessories && outfit.accessories.length > 0) {
          document.getElementById('clothing-icon-3').textContent = getAccessoryIcon(outfit.accessories[0]);
          document.getElementById('clothing-name-3').textContent = outfit.accessories[0];
        } else {
          document.getElementById('clothing-icon-3').textContent = '✨';
          document.getElementById('clothing-name-3').textContent = '快適';
        }
      }
      
      document.getElementById('clothing-advice').textContent = clothingData.advice;
    }
    
    // アイコンを取得するヘルパー関数
    function getOuterIcon(outer) {
      if (outer.includes('コート')) return '🧥';
      if (outer.includes('ジャケット') || outer.includes('ブレザー')) return '👔';
      if (outer.includes('パーカー')) return '🧥';
      if (outer.includes('ダウン')) return '🧥';
      return '🧥';
    }
    
    function getTopIcon(top) {
      if (top.includes('ポロ')) return '🏌️';
      if (top.includes('ワイシャツ') || top.includes('シャツ')) return '👔';
      if (top.includes('Tシャツ') || top.includes('半袖')) return '👕';
      if (top.includes('セーター')) return '🧶';
      if (top.includes('タンク')) return '🩳';
      return '👕';
    }
    
    function getBottomIcon(bottom) {
      if (bottom.includes('スラックス') || bottom.includes('ズボン')) return '👖';
      if (bottom.includes('ジーンズ')) return '👖';
      if (bottom.includes('チノ')) return '👖';
      if (bottom.includes('半ズボン') || bottom.includes('ショート')) return '🩳';
      return '👖';
    }
    
    function getShoesIcon(shoes) {
      if (shoes.includes('革靴')) return '👞';
      if (shoes.includes('ローファー')) return '👞';
      if (shoes.includes('スニーカー') || shoes.includes('運動靴')) return '👟';
      if (shoes.includes('ブーツ')) return '👢';
      if (shoes.includes('サンダル')) return '🩴';
      return '👟';
    }
    
    function getAccessoryIcon(accessory) {
      if (accessory.includes('マフラー')) return '🧣';
      if (accessory.includes('手袋')) return '🧤';
      if (accessory.includes('ネクタイ')) return '👔';
      if (accessory.includes('帽子') || accessory.includes('ニット帽')) return '👒';
      return '🧣';
    }

    // 持ち物アドバイスを表示する関数
    function displayItemsAdvice(itemsData) {
      const itemsContainer = document.getElementById('items-advice');
      itemsContainer.innerHTML = '';
      
      // 必須アイテムを表示
      itemsData.essential_items.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'flex items-center gap-4 mb-3';
        itemElement.innerHTML = `
          <span class="text-3xl" role="img" aria-label="${item.name}">${item.icon}</span>
          <div>
            <p class="text-sm font-semibold text-gray-800">${item.name}</p>
            <p class="text-xs text-gray-600">${item.reason}</p>
          </div>
        `;
        itemsContainer.appendChild(itemElement);
      });
      
      // オプションアイテムを表示
      if (itemsData.optional_items.length > 0) {
        const optionalHeader = document.createElement('div');
        optionalHeader.className = 'mt-4 pt-3 border-t border-gray-200';
        optionalHeader.innerHTML = '<p class="text-xs text-gray-500 font-semibold mb-2">おすすめ（任意）</p>';
        itemsContainer.appendChild(optionalHeader);
        
        itemsData.optional_items.forEach(item => {
          const itemElement = document.createElement('div');
          itemElement.className = 'flex items-center gap-4 mb-3 opacity-75';
          itemElement.innerHTML = `
            <span class="text-2xl" role="img" aria-label="${item.name}">${item.icon}</span>
            <div>
              <p class="text-sm text-gray-700">${item.name}</p>
              <p class="text-xs text-gray-500">${item.reason}</p>
            </div>
          `;
          itemsContainer.appendChild(itemElement);
        });
      }
    }

    // デフォルトの持ち物アドバイスを表示する関数
    function displayDefaultItemsAdvice() {
      const itemsContainer = document.getElementById('items-advice');
      itemsContainer.innerHTML = `
        <div class="flex items-center gap-4">
          <span class="text-3xl" role="img" aria-label="umbrella">🌂</span>
          <p class="text-sm">夕方から雨が降るかも？折りたたみ傘があると安心！</p>
        </div>
        <div class="flex items-center gap-4">
          <span class="text-3xl" role="img" aria-label="sunglasses">🕶️</span>
          <p class="text-sm">日差しが強いから、UV対策は忘れずにね。</p>
        </div>
      `;
    }

    // リフレッシュ関数
    function refreshData() {
      fetchAndDisplayData();
    }

    // ページ読み込み時にデータを取得
    document.addEventListener('DOMContentLoaded', function() {
      fetchAndDisplayData();
      
      // スタイル選択ボタンのイベントリスナーを追加
      const styleButtons = document.querySelectorAll('.style-btn');
      styleButtons.forEach(button => {
        button.addEventListener('click', function() {
          // アクティブクラスを削除
          styleButtons.forEach(btn => btn.classList.remove('active'));
          
          // クリックされたボタンにアクティブクラスを追加
          this.classList.add('active');
          
          // 選択されたスタイルを更新
          currentStyle = this.dataset.style;
          
          // 服装データを再取得
          fetchClothingData(currentStyle);
        });
      });
    });
  </script>
  </body>
</html>